// build-posts.js ‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å—Ç–æ–≤ –¥–ª—è SEO
// –ß–∏—Ç–∞–µ—Ç /blog/posts.json –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ .md, —Ä–µ–Ω–¥–µ—Ä–∏—Ç /dist/blog/<slug>/index.html
// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç sitemap.xml –∏ robots.txt

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import MarkdownIt from 'markdown-it';
import hljs from 'highlight.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SITE_URL = "https://digisheets.ru"; // –≤–∞—à –ø—Ä–æ–¥-–¥–æ–º–µ–Ω
const SRC_DIR  = path.join(__dirname);    // –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ
const BLOG_DIR = path.join(__dirname, 'blog');
const DIST_DIR = path.join(__dirname, 'dist');

function ensureDir(p) {
  fs.mkdirSync(p, { recursive: true });
}

function readJSON(filePath) {
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

function readText(filePath) {
  return fs.readFileSync(filePath, 'utf8');
}

function parseFrontmatter(raw) {
  // –ü—Ä–æ—Å—Ç–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞ —Ñ—Ä–æ–Ω—Ç–º–∞—Ç—Ç–µ—Ä–∞ –≤–∏–¥–∞:
  // ---
  // title: ...
  // description: ...
  // date: YYYY-MM-DD
  // cover: /assets/...
  // tags:
  // - –¢–µ–≥1
  // - –¢–µ–≥2
  // ---
  if (!raw.startsWith('---')) return { meta: {}, body: raw };
  const end = raw.indexOf('\n---', 3);
  if (end < 0) return { meta: {}, body: raw };
  const block = raw.slice(3, end).trim();
  const body  = raw.slice(end + 4).replace(/^\s+/, '');
  const meta = {};
  const lines = block.split('\n');
  let currKey = null;
  let arr = null;
  for (const ln of lines) {
    const mArr = ln.match(/^\s*-\s+(.*)$/);
    if (mArr && currKey) {
      (arr ||= []).push(mArr[1].trim());
      meta[currKey] = arr;
      continue;
    }
    const mKV = ln.match(/^([A-Za-z0-9_-]+)\s*:\s*(.*)$/);
    if (mKV) {
      currKey = mKV[1];
      const val = mKV[2].trim();
      if (val === '') { arr = []; meta[currKey] = arr; }
      else {
        if (/^(true|false)$/i.test(val)) meta[currKey] = /^true$/i.test(val);
        else meta[currKey] = val.replace(/^"(.*)"$/, '$1').replace(/^'(.*)'$/, '$1');
        arr = null;
      }
    }
  }
  return { meta, body };
}

function htmlEscape(s) {
  return String(s).replace(/[&<>"]/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));
}

function renderTemplate({ title, description, cover, date, tags, slug, html }) {
  const pageTitle = `${title} ‚Äî DigiSheets`;
  const canonical = `${SITE_URL}/blog/${slug}/`;
  const ogImage   = cover || `${SITE_URL}/assets/og-default.png`;
  const jsonLd = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": title,
    "description": description || title,
    "image": ogImage,
    "datePublished": date,
    "dateModified": date,
    "author": { "@type": "Organization", "name": "DigiSheets" },
    "publisher": {
      "@type": "Organization",
      "name": "DigiSheets",
      "logo": { "@type": "ImageObject", "url": `${SITE_URL}/assets/logo.png` }
    },
    "mainEntityOfPage": { "@type": "WebPage", "@id": canonical }
  };

  return [
`<!doctype html>
<html lang="ru" data-theme="light">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>${htmlEscape(pageTitle)}</title>
  <meta name="description" content="${htmlEscape(description || '')}">
  <link rel="icon" href="/favicon.ico">
  <link rel="canonical" href="${canonical}">
  <meta property="og:type" content="article">
  <meta property="og:title" content="${htmlEscape(title)}">
  <meta property="og:description" content="${htmlEscape(description || '')}">
  <meta property="og:url" content="${canonical}">
  <meta property="og:image" content="${ogImage}">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:title" content="${htmlEscape(title)}">
  <meta name="twitter:description" content="${htmlEscape(description || '')}">
  <meta name="twitter:image" content="${ogImage}">
  <link rel="stylesheet" href="/style.css">
  <link rel="stylesheet" href="/blog/blog.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css">
  <script type="application/ld+json">${JSON.stringify(jsonLd)}</script>
</head>
<body>
  <header class="header">
    <div class="container header__inner">
      <a class="logo" href="/#hero">DigiSheets</a>
      <nav class="nav">
        <button class="burger" id="burger" aria-label="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é" aria-expanded="false">
          <span></span><span></span><span></span>
        </button>
        <ul id="navList" class="nav-list">
          <li><a class="nav-link" href="/#features">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</a></li>
          <li><a class="nav-link" href="/#walkthrough">–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫</a></li>
          <li><a class="nav-link" href="/#cases">–ö–µ–π—Å—ã</a></li>
          <li><a class="nav-link" href="/#guide">–ì–∞–π–¥</a></li>
          <li><a class="nav-link" href="/#testimonials">–û—Ç–∑—ã–≤—ã</a></li>
          <li><a class="nav-link" href="/#custom">–í–Ω–µ–¥—Ä–µ–Ω–∏–µ</a></li>
          <li><a class="nav-link" href="/#faq">FAQ</a></li>
          <li><a class="nav-link" href="/#partners">–ü–∞—Ä—Ç–Ω—ë—Ä—ã</a></li>
          <li><a class="nav-link" href="/blog/">–ë–ª–æ–≥</a></li>
          <li><a class="btn primary" target="_blank" rel="noopener"
                 href="https://script.google.com/macros/s/AKfycbwUhLtIB5H9LjEGhBLCdTEyYNn6oDTI3xm5yPKCYyixNEa676JOIvt_gJQp3TRwNGibMw/exec">–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É</a></li>
          <li><button id="themeToggle" class="btn ghost" type="button">üåô –¢—ë–º–Ω–∞—è</button></li>
        </ul>
      </nav>
    </div>
  </header>

  <main class="section">
    <article class="container" style="max-width:800px">
      <p><a class="btn secondary" href="/blog/">‚Üê –ö–æ –≤—Å–µ–º —Å—Ç–∞—Ç—å—è–º</a></p>
      <h1 id="postTitle" style="margin:12px 0">${htmlEscape(title)}</h1>
      <p id="postMeta" style="color:var(--muted);margin-bottom:10px">${date ? new Date(date).toLocaleDateString('ru-RU') : ''}${Array.isArray(tags) && tags.length ? ' ‚Ä¢ ' + tags.join(', ') : ''}</p>
      ${cover ? `<img class="post-cover" src="${htmlEscape(cover)}" alt="${htmlEscape(title)}">` : ''}
      <div id="postContent" class="post-content">${html}</div>
    </article>
  </main>

  <footer class="footer">
    <div class="container footer__inner">
      <div class="footer__brand">
        <a class="logo" href="/#hero">DigiSheets</a>
        <p>AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç-–∫–æ–º–∞–Ω–¥ –Ω–∞ –±–∞–∑–µ Google&nbsp;–¢–∞–±–ª–∏—Ü.</p>
        <a href="https://t.me/s/digis_news" target="_blank" rel="noopener" class="footer-telegram" aria-label="–ù–∞—à Telegram-–∫–∞–Ω–∞–ª">
          <img src="/assets/telegram.svg" alt="Telegram" width="32" height="32">
        </a>
      </div>
      <nav class="footer__nav" aria-label="–ù–∞–≤–∏–≥–∞—Ü–∏—è —Ñ—É—Ç–µ—Ä–∞">
        <strong>–ü—Ä–æ–¥—É–∫—Ç</strong>
        <a href="/#features">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</a>
        <a href="/#walkthrough">–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫</a>
        <a href="/#cases">–ö–µ–π—Å—ã</a>
        <a href="/#guide">–ì–∞–π–¥</a>
        <a href="/#faq">FAQ</a>
      </nav>
      <nav class="footer__nav" aria-label="–ö–æ–º–ø–∞–Ω–∏—è">
        <strong>–ö–æ–º–ø–∞–Ω–∏—è</strong>
        <a href="/#partners">–ü–∞—Ä—Ç–Ω—ë—Ä—ã</a>
        <a href="/#testimonials">–û—Ç–∑—ã–≤—ã</a>
        <a href="/#custom">–í–Ω–µ–¥—Ä–µ–Ω–∏–µ</a>
        <a href="/blog/">–ë–ª–æ–≥</a>
        <a href="/privacy-policy.html">–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>
      </nav>
    </div>
    <div class="footer__bottom">
      <div class="container">
        ¬© DigiSheets, 2025 ‚Ä¢ <a href="mailto:info@digisheets.ru">info@digisheets.ru</a>
      </div>
    </div>
  </footer>
  <script src="/main.js"></script>
</body>
</html>`
  ].join('\n');
}

(async function main() {
  ensureDir(DIST_DIR);

  // –ö–æ–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã —Å–∞–π—Ç–∞ –∫–∞–∫ –µ—Å—Ç—å (–∫—Ä–æ–º–µ –±–ª–æ–≥–∞ ‚Äî –µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏–º –≤—ã–±–æ—Ä–æ—á–Ω–æ)
  // –ï—Å–ª–∏ —É –≤–∞—Å –≤–µ—Å—å —Å–∞–π—Ç –≤ –∫–æ—Ä–Ω–µ, –º–∏–Ω–∏–º—É–º ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ /blog –∏ –∫–æ—Ä–Ω–µ–≤—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ.
  // –ó–¥–µ—Å—å —Å–∫–æ–ø–∏—Ä—É–µ–º –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ dist, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ–º /blog/ –ø–æ—Å—Ç–∞–º–∏.
  // (–ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ –∫–æ–ø–∏—Ä–æ–≤—â–∏–∫–∏.)
  function copyDir(src, dst) {
    ensureDir(dst);
    for (const entry of fs.readdirSync(src, { withFileTypes: true })) {
      if (entry.name === 'dist' || entry.name === 'node_modules' || entry.name === '.git') continue;
      const s = path.join(src, entry.name);
      const d = path.join(dst, entry.name);
      if (entry.isDirectory()) copyDir(s, d);
      else fs.copyFileSync(s, d);
    }
  }
  copyDir(SRC_DIR, DIST_DIR);

  // –ü—Ä–æ—á–∏—Ç–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –ø–æ—Å—Ç–æ–≤
  const postsJsonPath = path.join(DIST_DIR, 'blog', 'posts.json');
  const posts = readJSON(postsJsonPath);

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MarkdownIt
  const md = new MarkdownIt({
    html: false,
    linkify: true,
    typographer: true,
    highlight: (str, lang) => {
      try {
        if (lang && hljs.getLanguage(lang)) {
          return `<pre><code class="language-${lang}">${hljs.highlight(str, { language: lang }).value}</code></pre>`;
        }
      } catch {}
      const esc = str.replace(/[&<>"]/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;'}[m]));
      return `<pre><code>${esc}</code></pre>`;
    }
  });

  // –°–≥–µ–Ω–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å—Ç–æ–≤
  const urls = [];
  for (const p of posts) {
    const slug = String(p.slug);
    const mdPath = p.md && !/^https?:\/\//.test(p.md)
      ? path.join(DIST_DIR, 'blog', p.md)
      : null;

    let raw = '';
    if (mdPath && fs.existsSync(mdPath)) {
      raw = readText(mdPath);
    } else {
      // –µ—Å–ª–∏ md –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä HTML-–ø–æ—Å—Ç) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤ —Å—Ç–∞—Ç–∏–∫–µ
      continue;
    }

    const { meta, body } = parseFrontmatter(raw);
    const title = (meta.title || p.title || '').trim();
    const description = (meta.description || p.description || '').trim();
    const date = (meta.date || p.date || '').trim();
    const tags = Array.isArray(meta.tags) ? meta.tags : (Array.isArray(p.tags) ? p.tags : []);
    const cover = (meta.cover || p.cover || '').trim();

    const html = md.render(body);

    const outDir = path.join(DIST_DIR, 'blog', slug);
    ensureDir(outDir);
    fs.writeFileSync(
      path.join(outDir, 'index.html'),
      renderTemplate({ title, description, cover, date, tags, slug, html }),
      'utf8'
    );

    urls.push(`${SITE_URL}/blog/${slug}/`);
  }

  // –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ ‚Äî —á—Ç–æ–±—ã –≤ –Ω—ë–º –±—ã–ª–∏ –∫—Ä–∞—Å–∏–≤—ã–µ URL (—Å—Å—ã–ª–∫–∏ –¥–∞–ª—å—à–µ –ø–æ–ø—Ä–∞–≤–∏–º –≤ blog.js)
  // (–ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º –≤ JSON, –ø—Ä–æ—Å—Ç–æ –¥–ª—è sitemap).
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è sitemap.xml:
  const sitemap = [
    '<?xml version="1.0" encoding="UTF-8"?>',
    '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">'
  ]
    .concat(urls.map(u => `  <url><loc>${u}</loc></url>`))
    .concat(['</urlset>'])
    .join('\n');

  fs.writeFileSync(path.join(DIST_DIR, 'sitemap.xml'), sitemap, 'utf8');

  // robots.txt (–º—è–≥–∫–∏–π, —Ä–∞–∑—Ä–µ—à–∞—é—â–∏–π –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é)
  const robots = [
    'User-agent: *',
    'Allow: /',
    `Sitemap: ${SITE_URL}/sitemap.xml`
  ].join('\n');
  fs.writeFileSync(path.join(DIST_DIR, 'robots.txt'), robots, 'utf8');

  console.log('Build complete.');
})();
